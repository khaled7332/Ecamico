{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst toCamelCase = require('../helpers/to-camel-case');\n\nconst deepClone = require('../helpers/deep-clone');\n/**\n * Options\n */\n\n\nconst AggregatedByOptions = ['day', 'week', 'month'];\nconst CountryOptions = ['us', 'ca'];\nconst SortByDirection = ['desc', 'asc'];\n/**\n * Statistics class\n */\n\nclass Statistics {\n  constructor(data) {\n    this.startDate = null;\n    this.endDate = null;\n    this.aggregatedBy = null;\n\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * Build from data\n   */\n\n\n  fromData(data) {\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Statistics data');\n    } //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n\n\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'customArgs']);\n    const {\n      startDate,\n      endDate,\n      aggregatedBy\n    } = data;\n    this.setStartDate(startDate);\n    this.setEndDate(endDate);\n    this.setAggregatedBy(aggregatedBy);\n  }\n  /**\n   * Set startDate\n   */\n\n\n  setStartDate(startDate) {\n    if (typeof startDate === 'undefined') {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    if (new Date(startDate) === 'Invalid Date' || isNaN(new Date(startDate))) {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    console.log(startDate);\n    this.startDate = new Date(startDate).toISOString().slice(0, 10);\n  }\n  /**\n   * Set endDate\n   */\n\n\n  setEndDate(endDate) {\n    if (typeof endDate === 'undefined') {\n      this.endDate = new Date().toISOString().slice(0, 10);\n      return;\n    }\n\n    if (new Date(endDate) === 'Invalid Date' || isNaN(new Date(endDate))) {\n      throw new Error('Date expected for `endDate`');\n    }\n\n    this.endDate = new Date(endDate).toISOString().slice(0, 10);\n  }\n  /**\n   * Set aggregatedBy\n   */\n\n\n  setAggregatedBy(aggregatedBy) {\n    if (typeof aggregatedBy === 'undefined') {\n      return;\n    }\n\n    if (typeof aggregatedBy === 'string' && AggregatedByOptions.includes(aggregatedBy.toLowerCase())) {\n      this.aggregatedBy = aggregatedBy;\n    } else {\n      throw new Error('Incorrect value for `aggregatedBy`');\n    }\n  }\n  /**\n   * Get Global\n   */\n\n\n  getGlobal() {\n    const {\n      startDate,\n      endDate,\n      aggregatedBy\n    } = this;\n    return {\n      startDate,\n      endDate,\n      aggregatedBy\n    };\n  }\n  /**\n   * Get Advanced\n   */\n\n\n  getAdvanced(country) {\n    const json = this.getGlobal();\n\n    if (typeof country === 'undefined') {\n      return json;\n    }\n\n    if (typeof country === 'string' && CountryOptions.includes(country.toLowerCase())) {\n      json.country = country;\n    }\n\n    return json;\n  }\n  /**\n   * Get Advanced Mailbox Providers\n   */\n\n\n  getAdvancedMailboxProviders(mailBoxProviders) {\n    const json = this.getGlobal();\n\n    if (typeof mailBoxProviders === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(mailBoxProviders) && mailBoxProviders.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `mailboxProviders`');\n    }\n\n    json.mailBoxProviders = mailBoxProviders;\n    return json;\n  }\n  /**\n   * Get Advanced Browsers\n   */\n\n\n  getAdvancedBrowsers(browsers) {\n    const json = this.getGlobal();\n\n    if (typeof browsers === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(browsers) && browsers.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `browsers`');\n    }\n\n    json.browsers = browsers;\n    return json;\n  }\n  /**\n   * Get Categories\n   */\n\n\n  getCategories(categories) {\n    if (typeof categories === 'undefined') {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    if (!this._isValidArrayOfStrings(categories)) {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    const json = this.getGlobal();\n    json.categories = categories;\n    return json;\n  }\n  /**\n   * Get Subuser\n   */\n\n\n  getSubuser(subusers) {\n    if (typeof subusers === 'undefined') {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    if (!this._isValidArrayOfStrings(subusers)) {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    const json = this.getGlobal();\n    json.subusers = subusers;\n    return json;\n  }\n  /**\n   * Get Subuser Sum\n   */\n\n\n  getSubuserSum(sortByMetric = 'delivered', sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n    return json;\n  }\n  /**\n   * Get Subuser Monthly\n   */\n\n\n  getSubuserMonthly(sortByMetric = 'delivered', sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n    return json;\n  }\n\n  _isValidArrayOfStrings(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n\n    if (arr.length < 1 || arr.some(x => typeof x !== 'string')) {\n      return false;\n    }\n\n    return true;\n  }\n\n} //Export class\n\n\nmodule.exports = Statistics;","map":{"version":3,"names":["toCamelCase","require","deepClone","AggregatedByOptions","CountryOptions","SortByDirection","Statistics","constructor","data","startDate","endDate","aggregatedBy","fromData","Error","setStartDate","setEndDate","setAggregatedBy","Date","isNaN","console","log","toISOString","slice","includes","toLowerCase","getGlobal","getAdvanced","country","json","getAdvancedMailboxProviders","mailBoxProviders","Array","isArray","some","x","getAdvancedBrowsers","browsers","getCategories","categories","_isValidArrayOfStrings","getSubuser","subusers","getSubuserSum","sortByMetric","sortByDirection","limit","offset","getSubuserMonthly","arr","length","module","exports"],"sources":["D:/grad project/examico project/Ecamico/node_modules/@sendgrid/helpers/classes/statistics.js"],"sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst toCamelCase = require('../helpers/to-camel-case');\nconst deepClone = require('../helpers/deep-clone');\n\n/**\n * Options\n */\nconst AggregatedByOptions = ['day', 'week', 'month'];\nconst CountryOptions = ['us', 'ca'];\nconst SortByDirection = ['desc', 'asc'];\n\n/**\n * Statistics class\n */\nclass Statistics {\n  constructor(data) {\n    this.startDate = null;\n    this.endDate = null;\n    this.aggregatedBy = null;\n\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * Build from data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Statistics data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'customArgs']);\n\n    const { startDate,\n      endDate,\n      aggregatedBy,\n    } = data;\n\n    this.setStartDate(startDate);\n    this.setEndDate(endDate);\n    this.setAggregatedBy(aggregatedBy);\n  }\n\n  /**\n   * Set startDate\n   */\n  setStartDate(startDate) {\n    if (typeof startDate === 'undefined') {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    if ((new Date(startDate) === 'Invalid Date') ||\n        isNaN(new Date(startDate))) {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    console.log(startDate);\n\n    this.startDate = new Date(startDate).toISOString().slice(0, 10);\n  }\n\n  /**\n   * Set endDate\n   */\n  setEndDate(endDate) {\n    if (typeof endDate === 'undefined') {\n      this.endDate = new Date().toISOString().slice(0, 10);\n      return;\n    }\n\n    if (new Date(endDate) === 'Invalid Date' || isNaN(new Date(endDate))) {\n      throw new Error('Date expected for `endDate`');\n    }\n\n    this.endDate = new Date(endDate).toISOString().slice(0, 10);\n  }\n\n  /**\n   * Set aggregatedBy\n   */\n  setAggregatedBy(aggregatedBy) {\n    if (typeof aggregatedBy === 'undefined') {\n      return;\n    }\n\n    if (typeof aggregatedBy === 'string' &&\n        AggregatedByOptions.includes(aggregatedBy.toLowerCase())) {\n      this.aggregatedBy = aggregatedBy;\n    } else {\n      throw new Error('Incorrect value for `aggregatedBy`');\n    }\n  }\n\n  /**\n   * Get Global\n   */\n  getGlobal() {\n    const { startDate, endDate, aggregatedBy } = this;\n\n    return { startDate, endDate, aggregatedBy };\n  }\n\n  /**\n   * Get Advanced\n   */\n  getAdvanced(country) {\n    const json = this.getGlobal();\n\n    if (typeof country === 'undefined') {\n      return json;\n    }\n\n    if (typeof country === 'string' &&\n        CountryOptions.includes(country.toLowerCase())) {\n      json.country = country;\n    }\n\n    return json;\n  }\n\n  /**\n   * Get Advanced Mailbox Providers\n   */\n  getAdvancedMailboxProviders(mailBoxProviders) {\n    const json = this.getGlobal();\n\n    if (typeof mailBoxProviders === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(mailBoxProviders) &&\n        mailBoxProviders.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `mailboxProviders`');\n    }\n\n    json.mailBoxProviders = mailBoxProviders;\n\n    return json;\n  }\n\n  /**\n   * Get Advanced Browsers\n   */\n  getAdvancedBrowsers(browsers) {\n    const json = this.getGlobal();\n\n    if (typeof browsers === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(browsers) && browsers.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `browsers`');\n    }\n\n    json.browsers = browsers;\n\n    return json;\n  }\n\n  /**\n   * Get Categories\n   */\n  getCategories(categories) {\n    if (typeof categories === 'undefined') {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    if (!this._isValidArrayOfStrings(categories)) {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    const json = this.getGlobal();\n    json.categories = categories;\n\n    return json;\n  }\n\n  /**\n   * Get Subuser\n   */\n  getSubuser(subusers) {\n    if (typeof subusers === 'undefined') {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    if (!this._isValidArrayOfStrings(subusers)) {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    const json = this.getGlobal();\n    json.subusers = subusers;\n\n    return json;\n  }\n\n  /**\n   * Get Subuser Sum\n   */\n  getSubuserSum(sortByMetric = 'delivered',\n    sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n\n    return json;\n  }\n\n  /**\n   * Get Subuser Monthly\n   */\n  getSubuserMonthly(sortByMetric = 'delivered',\n    sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n\n    return json;\n  }\n\n  _isValidArrayOfStrings(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n\n    if (arr.length < 1 || arr.some(x => typeof x !== 'string')) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n//Export class\nmodule.exports = Statistics;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}