{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst toCamelCase = require('../helpers/to-camel-case');\n\nconst toSnakeCase = require('../helpers/to-snake-case');\n\nconst deepClone = require('../helpers/deep-clone');\n\nconst fs = require('fs');\n\nconst path = require('path');\n/**\n * Attachment class\n */\n\n\nclass Attachment {\n  /**\n   * Constructor\n   */\n  constructor(data) {\n    //Create from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * From data\n   */\n\n\n  fromData(data) {\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    } //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n\n\n    data = deepClone(data);\n    data = toCamelCase(data); //Extract properties from data\n\n    const {\n      content,\n      filename,\n      type,\n      disposition,\n      contentId,\n      filePath\n    } = data;\n\n    if (typeof content !== 'undefined' && typeof filePath !== 'undefined') {\n      throw new Error(\"The props 'content' and 'filePath' cannot be used together.\");\n    } //Set data\n\n\n    this.setFilename(filename);\n    this.setType(type);\n    this.setDisposition(disposition);\n    this.setContentId(contentId);\n    this.setContent(filePath ? this.readFile(filePath) : content);\n  }\n  /**\n   * Read a file and return its content as base64\n   */\n\n\n  readFile(filePath) {\n    return fs.readFileSync(path.resolve(filePath));\n  }\n  /**\n   * Set content\n   */\n\n\n  setContent(content) {\n    //Duck type check toString on content if it's a Buffer as that's the method that will be called.\n    if (typeof content === 'string') {\n      this.content = content;\n      return;\n    } else if (content instanceof Buffer && content.toString !== undefined) {\n      this.content = content.toString();\n\n      if (this.disposition === 'attachment') {\n        this.content = content.toString('base64');\n      }\n\n      return;\n    }\n\n    throw new Error('`content` expected to be either Buffer or string');\n  }\n  /**\n   * Set content\n   */\n\n\n  setFileContent(content) {\n    if (content instanceof Buffer && content.toString !== undefined) {\n      this.content = content.toString('base64');\n      return;\n    }\n\n    throw new Error('`content` expected to be Buffer');\n  }\n  /**\n   * Set filename\n   */\n\n\n  setFilename(filename) {\n    if (typeof filename === 'undefined') {\n      return;\n    }\n\n    if (filename && typeof filename !== 'string') {\n      throw new Error('String expected for `filename`');\n    }\n\n    this.filename = filename;\n  }\n  /**\n   * Set type\n   */\n\n\n  setType(type) {\n    if (typeof type === 'undefined') {\n      return;\n    }\n\n    if (typeof type !== 'string') {\n      throw new Error('String expected for `type`');\n    }\n\n    this.type = type;\n  }\n  /**\n   * Set disposition\n   */\n\n\n  setDisposition(disposition) {\n    if (typeof disposition === 'undefined') {\n      return;\n    }\n\n    if (typeof disposition !== 'string') {\n      throw new Error('String expected for `disposition`');\n    }\n\n    this.disposition = disposition;\n  }\n  /**\n   * Set content ID\n   */\n\n\n  setContentId(contentId) {\n    if (typeof contentId === 'undefined') {\n      return;\n    }\n\n    if (typeof contentId !== 'string') {\n      throw new Error('String expected for `contentId`');\n    }\n\n    this.contentId = contentId;\n  }\n  /**\n   * To JSON\n   */\n\n\n  toJSON() {\n    //Extract properties from self\n    const {\n      content,\n      filename,\n      type,\n      disposition,\n      contentId\n    } = this; //Initialize with mandatory properties\n\n    const json = {\n      content,\n      filename\n    }; //Add whatever else we have\n\n    if (typeof type !== 'undefined') {\n      json.type = type;\n    }\n\n    if (typeof disposition !== 'undefined') {\n      json.disposition = disposition;\n    }\n\n    if (typeof contentId !== 'undefined') {\n      json.contentId = contentId;\n    } //Return\n\n\n    return toSnakeCase(json);\n  }\n\n} //Export class\n\n\nmodule.exports = Attachment;","map":{"version":3,"names":["toCamelCase","require","toSnakeCase","deepClone","fs","path","Attachment","constructor","data","fromData","Error","content","filename","type","disposition","contentId","filePath","setFilename","setType","setDisposition","setContentId","setContent","readFile","readFileSync","resolve","Buffer","toString","undefined","setFileContent","toJSON","json","module","exports"],"sources":["D:/grad project/examico project/Ecamico/node_modules/@sendgrid/helpers/classes/attachment.js"],"sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst toCamelCase = require('../helpers/to-camel-case');\nconst toSnakeCase = require('../helpers/to-snake-case');\nconst deepClone = require('../helpers/deep-clone');\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Attachment class\n */\nclass Attachment {\n\n  /**\n   * Constructor\n   */\n  constructor(data) {\n\n    //Create from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * From data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data);\n\n    //Extract properties from data\n    const {\n      content,\n      filename,\n      type,\n      disposition,\n      contentId,\n      filePath,\n    } = data;\n\n    if ((typeof content !== 'undefined') && (typeof filePath !== 'undefined')) {\n      throw new Error(\n        \"The props 'content' and 'filePath' cannot be used together.\"\n      );\n    }\n\n    //Set data\n    this.setFilename(filename);\n    this.setType(type);\n    this.setDisposition(disposition);\n    this.setContentId(contentId);\n    this.setContent(filePath ? this.readFile(filePath) : content);\n  }\n\n  /**\n   * Read a file and return its content as base64\n   */\n  readFile(filePath) {\n    return fs.readFileSync(path.resolve(filePath));\n  }\n\n  /**\n   * Set content\n   */\n  setContent(content) {\n    //Duck type check toString on content if it's a Buffer as that's the method that will be called.\n    if (typeof content === 'string') {\n      this.content = content;\n      return;\n    } else if (content instanceof Buffer && content.toString !== undefined) {\n      this.content = content.toString();\n\n      if (this.disposition === 'attachment') {\n        this.content = content.toString('base64');\n      }\n\n      return;\n    }\n\n    throw new Error('`content` expected to be either Buffer or string');\n  }\n\n  /**\n   * Set content\n   */\n  setFileContent(content) {\n    if (content instanceof Buffer && content.toString !== undefined) {\n      this.content = content.toString('base64');\n      return;\n    }\n\n    throw new Error('`content` expected to be Buffer');\n  }\n\n  /**\n   * Set filename\n   */\n  setFilename(filename) {\n    if (typeof filename === 'undefined') {\n      return;\n    }\n    if (filename && typeof filename !== 'string') {\n      throw new Error('String expected for `filename`');\n    }\n    this.filename = filename;\n  }\n\n  /**\n   * Set type\n   */\n  setType(type) {\n    if (typeof type === 'undefined') {\n      return;\n    }\n    if (typeof type !== 'string') {\n      throw new Error('String expected for `type`');\n    }\n    this.type = type;\n  }\n\n  /**\n   * Set disposition\n   */\n  setDisposition(disposition) {\n    if (typeof disposition === 'undefined') {\n      return;\n    }\n    if (typeof disposition !== 'string') {\n      throw new Error('String expected for `disposition`');\n    }\n    this.disposition = disposition;\n  }\n\n  /**\n   * Set content ID\n   */\n  setContentId(contentId) {\n    if (typeof contentId === 'undefined') {\n      return;\n    }\n    if (typeof contentId !== 'string') {\n      throw new Error('String expected for `contentId`');\n    }\n    this.contentId = contentId;\n  }\n\n  /**\n   * To JSON\n   */\n  toJSON() {\n\n    //Extract properties from self\n    const {content, filename, type, disposition, contentId} = this;\n\n    //Initialize with mandatory properties\n    const json = {content, filename};\n\n    //Add whatever else we have\n    if (typeof type !== 'undefined') {\n      json.type = type;\n    }\n    if (typeof disposition !== 'undefined') {\n      json.disposition = disposition;\n    }\n    if (typeof contentId !== 'undefined') {\n      json.contentId = contentId;\n    }\n\n    //Return\n    return toSnakeCase(json);\n  }\n}\n\n//Export class\nmodule.exports = Attachment;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}